import{_ as a,p as e,q as n,a1 as s}from"./framework-96b046e1.js";const t={},c=s(`<h1 id="lodash-slice" tabindex="-1"><a class="header-anchor" href="#lodash-slice" aria-hidden="true">#</a> lodash slice</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>裁剪数组 <code>array</code>。</p></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>_<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>end<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>裁剪数组 <code>array</code>，从 <code>start</code> 位置开始到end结束，但不包括 <code>end</code> 本身的位置。</p><p><strong>Note:</strong> 这个方法用于代替 <code>Array#slice</code> 来确保数组正确返回。</p><h2 id="引入版本" tabindex="-1"><a class="header-anchor" href="#引入版本" aria-hidden="true">#</a> 引入版本</h2><p>3.0.0</p><h2 id="参数" tabindex="-1"><a class="header-anchor" href="#参数" aria-hidden="true">#</a> 参数</h2><ol><li><code>array</code> (Array): 要裁剪数组。</li><li><code>[start=0]</code> (Number): 开始位置。</li><li><code>[end=array.length]</code> (Number): 结束位置。</li></ol><h2 id="返回" tabindex="-1"><a class="header-anchor" href="#返回" aria-hidden="true">#</a> 返回</h2><p>(Array): 返回 数组 <code>array</code> 裁剪部分的新数组。</p>`,12),o=[c];function r(d,i){return e(),n("div",null,o)}const l=a(t,[["render",r],["__file","slice.html.vue"]]);export{l as default};
